#!/usr/bin/env python3
"""
Test script for SuperClaude AI integration
"""
import asyncio
import json
from datetime import datetime
from app.services.superclaude_ai_service import superclaude_ai_service


async def test_superclaude_features():
    """Test various SuperClaude features"""
    
    print("üöÄ Testing SuperClaude AI Service\n")
    
    # Test 1: Basic Enhanced Chat
    print("1Ô∏è‚É£ Testing Enhanced Chat...")
    session_id = "test-session-001"
    
    chat_result = await superclaude_ai_service.enhanced_chat(
        message="Help me design a randomized controlled trial for spinal fusion surgery",
        session_id=session_id,
        use_sequential=True,
        use_memory=True,
        use_magic=True,
        auto_persona=True
    )
    
    print(f"‚úÖ Enhanced Chat Response:")
    print(f"   - Model: {chat_result.get('timestamp')}")
    print(f"   - Persona: {chat_result.get('persona')}")
    print(f"   - Thinking Steps: {chat_result.get('thinking_steps')}")
    print(f"   - Enhanced: {chat_result.get('enhanced')}")
    print(f"   - Response Preview: {chat_result['content'][:200]}...\n")
    
    # Test 2: Research Plan Generation
    print("2Ô∏è‚É£ Testing Research Plan Generation...")
    
    plan_result = await superclaude_ai_service.generate_research_plan(
        research_question="Does minimally invasive spine surgery reduce recovery time compared to traditional open surgery?",
        study_type="Randomized Controlled Trial",
        resources={
            "budget": "$500,000",
            "duration": "24 months",
            "centers": 3
        }
    )
    
    print(f"‚úÖ Research Plan Generated:")
    print(f"   - Session ID: {plan_result['session_id']}")
    print(f"   - Generated by: {plan_result['generated_by']}")
    print(f"   - Thinking Process: {plan_result['thinking_process']}")
    print(f"   - Phases: {len(plan_result['phases'])}")
    for phase in plan_result['phases']:
        print(f"     ‚Ä¢ {phase['phase']}: {phase['duration']}")
    print()
    
    # Test 3: Persona System
    print("3Ô∏è‚É£ Testing Persona System...")
    
    personas = superclaude_ai_service.personas
    print(f"‚úÖ Available Personas: {len(personas)}")
    for name, persona in personas.items():
        print(f"   - {persona.name} ({persona.role})")
        print(f"     Expertise: {', '.join(persona.expertise[:2])}...")
    print()
    
    # Test 4: Memory Context
    print("4Ô∏è‚É£ Testing Memory Context...")
    
    context = await superclaude_ai_service._retrieve_from_memory(session_id)
    if context:
        print(f"‚úÖ Retrieved Context:")
        print(f"   - Session: {context.session_id}")
        print(f"   - Topic: {context.research_topic or 'Not set'}")
        print(f"   - Phase: {context.current_phase or 'Not set'}")
        print(f"   - Findings: {len(context.key_findings)}")
    print()
    
    # Test 5: Magic Analysis
    print("5Ô∏è‚É£ Testing Magic Analysis...")
    
    methodology_analysis = await superclaude_ai_service._magic_analysis(
        "RCT comparing minimally invasive vs open spine surgery",
        "methodology"
    )
    
    print(f"‚úÖ Methodology Analysis:")
    print(f"   - Type: {methodology_analysis['type']}")
    print(f"   - Confidence: {methodology_analysis['confidence']}")
    print(f"   - Insights: {len(methodology_analysis['insights'])}")
    for insight in methodology_analysis['insights'][:2]:
        print(f"     ‚Ä¢ {insight}")
    print()
    
    # Test 6: Sequential Thinking
    print("6Ô∏è‚É£ Testing Sequential Thinking...")
    
    thinking_steps = await superclaude_ai_service._sequential_thinking(
        "How to ensure proper statistical power for the study?",
        context,
        max_steps=5
    )
    
    print(f"‚úÖ Sequential Thinking Steps: {len(thinking_steps)}")
    for step in thinking_steps[:3]:
        print(f"   - Step {step.step_number}: {step.thought[:50]}...")
    print()
    
    print("‚ú® All tests completed successfully!")
    
    # Save test results
    results = {
        "test_date": datetime.utcnow().isoformat(),
        "tests_passed": 6,
        "session_id": session_id,
        "features_tested": [
            "enhanced_chat",
            "research_plan",
            "personas",
            "memory_context",
            "magic_analysis",
            "sequential_thinking"
        ]
    }
    
    with open("superclaude_test_results.json", "w") as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüìÑ Test results saved to superclaude_test_results.json")


if __name__ == "__main__":
    asyncio.run(test_superclaude_features())